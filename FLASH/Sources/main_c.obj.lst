   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata
  18              		.align	2
  19              	.LC2:
  20 0000 0A0D5465 		.ascii	"\012\015Teste Serial FRDM-KL25\012\015\000"
  20      73746520 
  20      53657269 
  20      616C2046 
  20      52444D2D 
  21 001b 00       		.align	2
  22              	.LC4:
  23 001c 0A0D2041 		.ascii	"\012\015 A0: %d \000"
  23      303A2025 
  23      642000
  24 0027 00       		.align	2
  25              	.LC6:
  26 0028 0A0D2041 		.ascii	"\012\015 A1: %d \000"
  26      313A2025 
  26      642000
  27 0033 00       		.align	2
  28              	.LC8:
  29 0034 0A0D2041 		.ascii	"\012\015 A2: %d \000"
  29      323A2025 
  29      642000
  30 003f 00       		.align	2
  31              	.LC0:
  32 0040 20202020 		.ascii	"         \000"
  32      20202020 
  32      2000
  33 004a 0000     		.section	.text.main,"ax",%progbits
  34              		.align	2
  35              		.global	main
  36              		.code	16
  37              		.thumb_func
  39              	main:
  40              	.LFB0:
  41              		.file 1 "../Sources/main.c"
   1:../Sources/main.c **** /*****************************************************************
   2:../Sources/main.c ****  * 
   3:../Sources/main.c ****  * Projeto: Biblioteca FRDM-KL25 para KiT de Automação 
   4:../Sources/main.c ****  * Autor: Evandro Teixeira
   5:../Sources/main.c ****  * Informação: http://www.embarcados.com.br/kit-de-automacao/
   6:../Sources/main.c ****  * GitHub: https://github.com/evandro-teixeira/frdm_kl25_kit_automacao 
   7:../Sources/main.c ****  *  
   8:../Sources/main.c ****  *****************************************************************/
   9:../Sources/main.c **** #include "derivative.h" 	/* include peripheral declarations */
  10:../Sources/main.c **** #include "externs.h"   		/* Inclui os arquivos da biblioteca kit de Automação */
  11:../Sources/main.c **** 
  12:../Sources/main.c **** void ControleLED(void);
  13:../Sources/main.c **** 
  14:../Sources/main.c **** /* Aplicação de Demo KiT de Automação */
  15:../Sources/main.c **** int main(void)
  16:../Sources/main.c **** {	
  42              		.loc 1 16 0
  43              		.cfi_startproc
  44 0000 90B5     		push	{r4, r7, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 12
  47              		.cfi_offset 4, -12
  48              		.cfi_offset 7, -8
  49              		.cfi_offset 14, -4
  50 0002 85B0     		sub	sp, sp, #20
  51              	.LCFI1:
  52              		.cfi_def_cfa_offset 32
  53 0004 00AF     		add	r7, sp, #0
  54              	.LCFI2:
  55              		.cfi_def_cfa_register 7
  17:../Sources/main.c **** 	char c = 0;					
  56              		.loc 1 17 0
  57 0006 3B1C     		mov	r3, r7
  58 0008 0F33     		add	r3, r3, #15
  59 000a 0022     		mov	r2, #0
  60 000c 1A70     		strb	r2, [r3]
  18:../Sources/main.c **** 	char texto[10] = "         ";
  61              		.loc 1 18 0
  62 000e 3B1D     		add	r3, r7, #4
  63 0010 354A     		ldr	r2, .L5
  64 0012 03CA     		ldmia	r2!, {r0, r1}
  65 0014 03C3     		stmia	r3!, {r0, r1}
  66 0016 1288     		ldrh	r2, [r2]
  67 0018 1A80     		strh	r2, [r3]
  19:../Sources/main.c **** 	
  20:../Sources/main.c **** 	InicializaCPU();			// Inicializa CPU
  68              		.loc 1 20 0
  69 001a FFF7FEFF 		bl	InicializaCPU
  21:../Sources/main.c **** 	InicializaTimer();			// Inicializa Timer (PIT ~> 1 milissegundos)
  70              		.loc 1 21 0
  71 001e FFF7FEFF 		bl	InicializaTimer
  22:../Sources/main.c **** 	InicializaRele(RELE1);		// Inicializa Rele 1 
  72              		.loc 1 22 0
  73 0022 0020     		mov	r0, #0
  74 0024 FFF7FEFF 		bl	InicializaRele
  23:../Sources/main.c **** 	InicializaSaidas(OUT_D0);   // Inicializa Saída D0
  75              		.loc 1 23 0
  76 0028 0020     		mov	r0, #0
  77 002a FFF7FEFF 		bl	InicializaSaidas
  24:../Sources/main.c **** 	InicializaEntradas(IN_D0);  // Inicializa Entrada D0
  78              		.loc 1 24 0
  79 002e 0020     		mov	r0, #0
  80 0030 FFF7FEFF 		bl	InicializaEntradas
  25:../Sources/main.c **** 	InicializaSerial(115200);   // Inicializa Serial com Baud Rate 115200	
  81              		.loc 1 25 0
  82 0034 E123     		mov	r3, #225
  83 0036 5B02     		lsl	r3, r3, #9
  84 0038 181C     		mov	r0, r3
  85 003a FFF7FEFF 		bl	InicializaSerial
  26:../Sources/main.c **** 	InicializaAnalogico();		// Inicializa Analogico	
  86              		.loc 1 26 0
  87 003e FFF7FEFF 		bl	InicializaAnalogico
  27:../Sources/main.c **** 	InicializaLedRED();			//
  88              		.loc 1 27 0
  89 0042 FFF7FEFF 		bl	InicializaLedRED
  28:../Sources/main.c **** 	InicializaLedGREEN();       //
  90              		.loc 1 28 0
  91 0046 FFF7FEFF 		bl	InicializaLedGREEN
  29:../Sources/main.c **** 	InicializaLedBLUE();		//
  92              		.loc 1 29 0
  93 004a FFF7FEFF 		bl	InicializaLedBLUE
  30:../Sources/main.c **** 	AcionaLedRED(LED_OFF);		//
  94              		.loc 1 30 0
  95 004e 0120     		mov	r0, #1
  96 0050 FFF7FEFF 		bl	AcionaLedRED
  31:../Sources/main.c **** 	AcionaLedGREEN(LED_OFF);	//
  97              		.loc 1 31 0
  98 0054 0120     		mov	r0, #1
  99 0056 FFF7FEFF 		bl	AcionaLedGREEN
  32:../Sources/main.c **** 	AcionaLedBLUE(LED_OFF);		//
 100              		.loc 1 32 0
 101 005a 0120     		mov	r0, #1
 102 005c FFF7FEFF 		bl	AcionaLedBLUE
  33:../Sources/main.c **** 	
  34:../Sources/main.c **** 	EnviaString("\n\rTeste Serial FRDM-KL25\n\r"); // Escreve String 
 103              		.loc 1 34 0
 104 0060 224B     		ldr	r3, .L5+4
 105 0062 181C     		mov	r0, r3
 106 0064 FFF7FEFF 		bl	EnviaString
 107              	.L4:
  35:../Sources/main.c **** 	
  36:../Sources/main.c **** 	for(;;) 
  37:../Sources/main.c **** 	{		
  38:../Sources/main.c **** 		// Le entrada analogica A0
  39:../Sources/main.c **** 		sprintf(texto,"\n\r A0: %d ",LeAnalogicoA0());		
 108              		.loc 1 39 0
 109 0068 214C     		ldr	r4, .L5+8
 110 006a FFF7FEFF 		bl	LeAnalogicoA0
 111 006e 031C     		mov	r3, r0
 112 0070 3A1D     		add	r2, r7, #4
 113 0072 101C     		mov	r0, r2
 114 0074 211C     		mov	r1, r4
 115 0076 1A1C     		mov	r2, r3
 116 0078 FFF7FEFF 		bl	sprintf
  40:../Sources/main.c **** 		EnviaString(texto);
 117              		.loc 1 40 0
 118 007c 3B1D     		add	r3, r7, #4
 119 007e 181C     		mov	r0, r3
 120 0080 FFF7FEFF 		bl	EnviaString
  41:../Sources/main.c **** 		
  42:../Sources/main.c **** 		// Le entrada analogica A1
  43:../Sources/main.c **** 		sprintf(texto,"\n\r A1: %d ",LeAnalogicoA1());		
 121              		.loc 1 43 0
 122 0084 1B4C     		ldr	r4, .L5+12
 123 0086 FFF7FEFF 		bl	LeAnalogicoA1
 124 008a 031C     		mov	r3, r0
 125 008c 3A1D     		add	r2, r7, #4
 126 008e 101C     		mov	r0, r2
 127 0090 211C     		mov	r1, r4
 128 0092 1A1C     		mov	r2, r3
 129 0094 FFF7FEFF 		bl	sprintf
  44:../Sources/main.c **** 		EnviaString(texto);
 130              		.loc 1 44 0
 131 0098 3B1D     		add	r3, r7, #4
 132 009a 181C     		mov	r0, r3
 133 009c FFF7FEFF 		bl	EnviaString
  45:../Sources/main.c **** 		
  46:../Sources/main.c **** 		// Le entrada analogica A2
  47:../Sources/main.c **** 		sprintf(texto,"\n\r A2: %d ",LeAnalogicoA2());		
 134              		.loc 1 47 0
 135 00a0 154C     		ldr	r4, .L5+16
 136 00a2 FFF7FEFF 		bl	LeAnalogicoA2
 137 00a6 031C     		mov	r3, r0
 138 00a8 3A1D     		add	r2, r7, #4
 139 00aa 101C     		mov	r0, r2
 140 00ac 211C     		mov	r1, r4
 141 00ae 1A1C     		mov	r2, r3
 142 00b0 FFF7FEFF 		bl	sprintf
  48:../Sources/main.c **** 		EnviaString(texto);
 143              		.loc 1 48 0
 144 00b4 3B1D     		add	r3, r7, #4
 145 00b6 181C     		mov	r0, r3
 146 00b8 FFF7FEFF 		bl	EnviaString
  49:../Sources/main.c **** 		
  50:../Sources/main.c **** 		// Aciona o Rele 1
  51:../Sources/main.c **** 		AcionaRele(RELE1,ON);
 147              		.loc 1 51 0
 148 00bc 0020     		mov	r0, #0
 149 00be 0121     		mov	r1, #1
 150 00c0 FFF7FEFF 		bl	AcionaRele
  52:../Sources/main.c **** 		
  53:../Sources/main.c **** 		// Le entrada D0
  54:../Sources/main.c **** 		if(EntradasDigitais(IN_D0) == TRUE)
 151              		.loc 1 54 0
 152 00c4 0020     		mov	r0, #0
 153 00c6 FFF7FEFF 		bl	EntradasDigitais
 154 00ca 031C     		mov	r3, r0
 155 00cc 012B     		cmp	r3, #1
 156 00ce 04D1     		bne	.L2
  55:../Sources/main.c **** 		{
  56:../Sources/main.c **** 			// Aciona saida digital D0
  57:../Sources/main.c **** 			SaidasDigitais(OUT_D0,ON);
 157              		.loc 1 57 0
 158 00d0 0020     		mov	r0, #0
 159 00d2 0121     		mov	r1, #1
 160 00d4 FFF7FEFF 		bl	SaidasDigitais
 161 00d8 03E0     		b	.L3
 162              	.L2:
  58:../Sources/main.c **** 		}
  59:../Sources/main.c **** 		else
  60:../Sources/main.c **** 		{
  61:../Sources/main.c **** 			// Aciona saida digital D1
  62:../Sources/main.c **** 			SaidasDigitais(OUT_D0,OFF);
 163              		.loc 1 62 0
 164 00da 0020     		mov	r0, #0
 165 00dc 0021     		mov	r1, #0
 166 00de FFF7FEFF 		bl	SaidasDigitais
 167              	.L3:
  63:../Sources/main.c **** 		}
  64:../Sources/main.c **** 							
  65:../Sources/main.c **** 		//c = RecebeCh();		// Recebe character 
  66:../Sources/main.c **** 		//sprintf(texto,"\n\r ");
  67:../Sources/main.c **** 		//EnviaString(texto);
  68:../Sources/main.c **** 		//EnviaCh(c);			// Envia character
  69:../Sources/main.c **** 		
  70:../Sources/main.c **** 		ControleLED(); 		// executa função que controla LED RGB
 168              		.loc 1 70 0
 169 00e2 FFF7FEFF 		bl	ControleLED
  71:../Sources/main.c **** 	}	
 170              		.loc 1 71 0
 171 00e6 BFE7     		b	.L4
 172              	.L6:
 173              		.align	2
 174              	.L5:
 175 00e8 40000000 		.word	.LC0
 176 00ec 00000000 		.word	.LC2
 177 00f0 1C000000 		.word	.LC4
 178 00f4 28000000 		.word	.LC6
 179 00f8 34000000 		.word	.LC8
 180              		.cfi_endproc
 181              	.LFE0:
 183              		.section	.text.ControleLED,"ax",%progbits
 184              		.align	2
 185              		.global	ControleLED
 186              		.code	16
 187              		.thumb_func
 189              	ControleLED:
 190              	.LFB1:
  72:../Sources/main.c **** 	
  73:../Sources/main.c **** 	return 0;
  74:../Sources/main.c **** }
  75:../Sources/main.c **** /*****************************************************************/
  76:../Sources/main.c **** // função que controla LED RGB
  77:../Sources/main.c **** /*****************************************************************/
  78:../Sources/main.c **** void ControleLED(void)
  79:../Sources/main.c **** {
 191              		.loc 1 79 0
 192              		.cfi_startproc
 193 0000 98B5     		push	{r3, r4, r7, lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 16
 196              		.cfi_offset 3, -16
 197              		.cfi_offset 4, -12
 198              		.cfi_offset 7, -8
 199              		.cfi_offset 14, -4
 200 0002 00AF     		add	r7, sp, #0
 201              	.LCFI4:
 202              		.cfi_def_cfa_register 7
  80:../Sources/main.c **** 	static uint8_t estado = 0;
  81:../Sources/main.c **** 	static uint64_t temp = 0;
  82:../Sources/main.c **** 	switch(estado)
 203              		.loc 1 82 0
 204 0004 3C4B     		ldr	r3, .L22+8
 205 0006 1B78     		ldrb	r3, [r3]
 206 0008 052B     		cmp	r3, #5
 207 000a 00D9     		bls	.LCB117
 208 000c 6CE0     		b	.L7	@long jump
 209              	.LCB117:
 210 000e 9A00     		lsl	r2, r3, #2
 211 0010 3A4B     		ldr	r3, .L22+12
 212 0012 D318     		add	r3, r2, r3
 213 0014 1B68     		ldr	r3, [r3]
 214 0016 9F46     		mov	pc, r3
 215              		.section	.rodata.ControleLED,"a",%progbits
 216              		.align	2
 217              	.L15:
 218 0000 18000000 		.word	.L9
 219 0004 3A000000 		.word	.L10
 220 0008 5A000000 		.word	.L11
 221 000c 7C000000 		.word	.L12
 222 0010 9C000000 		.word	.L13
 223 0014 BE000000 		.word	.L14
 224              		.section	.text.ControleLED
 225              	.L9:
  83:../Sources/main.c **** 	{
  84:../Sources/main.c **** 		case 0:
  85:../Sources/main.c **** 			/*gpio_toggle(PTB,18);
  86:../Sources/main.c **** 			i++;
  87:../Sources/main.c **** 			if(i>1)
  88:../Sources/main.c **** 			{
  89:../Sources/main.c **** 				i = 0;
  90:../Sources/main.c **** 				estado = 1;
  91:../Sources/main.c **** 			}*/
  92:../Sources/main.c **** 			temp = Calcula_Tick(1000);	// solicita tempo de 1000 milissegundos = 1 segundos
 226              		.loc 1 92 0
 227 0018 364C     		ldr	r4, .L22+4
 228 001a 354B     		ldr	r3, .L22
 229 001c 181C     		mov	r0, r3
 230 001e 211C     		mov	r1, r4
 231 0020 FFF7FEFF 		bl	Calcula_Tick
 232 0024 031C     		mov	r3, r0
 233 0026 0C1C     		mov	r4, r1
 234 0028 354A     		ldr	r2, .L22+16
 235 002a 1360     		str	r3, [r2]
 236 002c 5460     		str	r4, [r2, #4]
  93:../Sources/main.c **** 			ToggleLedRED();
 237              		.loc 1 93 0
 238 002e FFF7FEFF 		bl	ToggleLedRED
  94:../Sources/main.c **** 			estado = 1;
 239              		.loc 1 94 0
 240 0032 314B     		ldr	r3, .L22+8
 241 0034 0122     		mov	r2, #1
 242 0036 1A70     		strb	r2, [r3]
  95:../Sources/main.c **** 		break;
 243              		.loc 1 95 0
 244 0038 56E0     		b	.L7
 245              	.L10:
  96:../Sources/main.c **** 		case 1:
  97:../Sources/main.c **** 			/*
  98:../Sources/main.c **** 			gpio_toggle(PTB,19);
  99:../Sources/main.c **** 			i++;
 100:../Sources/main.c **** 			if(i>1)
 101:../Sources/main.c **** 			{
 102:../Sources/main.c **** 				i = 0;
 103:../Sources/main.c **** 				estado = 2;
 104:../Sources/main.c **** 			}*/
 105:../Sources/main.c **** 			// Checa se atingiu tempo solicitado 
 106:../Sources/main.c **** 			if(Check_Tick(temp) == TRUE)
 246              		.loc 1 106 0
 247 003a 314B     		ldr	r3, .L22+16
 248 003c 5C68     		ldr	r4, [r3, #4]
 249 003e 1B68     		ldr	r3, [r3]
 250 0040 181C     		mov	r0, r3
 251 0042 211C     		mov	r1, r4
 252 0044 FFF7FEFF 		bl	Check_Tick
 253 0048 031C     		mov	r3, r0
 254 004a 012B     		cmp	r3, #1
 255 004c 47D1     		bne	.L19
 107:../Sources/main.c **** 			{
 108:../Sources/main.c **** 				estado = 2;
 256              		.loc 1 108 0
 257 004e 2A4B     		ldr	r3, .L22+8
 258 0050 0222     		mov	r2, #2
 259 0052 1A70     		strb	r2, [r3]
 109:../Sources/main.c **** 				ToggleLedRED();
 260              		.loc 1 109 0
 261 0054 FFF7FEFF 		bl	ToggleLedRED
 110:../Sources/main.c **** 			}
 111:../Sources/main.c **** 		break;
 262              		.loc 1 111 0
 263 0058 41E0     		b	.L19
 264              	.L11:
 112:../Sources/main.c **** 		case 2:
 113:../Sources/main.c **** 			/*gpio_toggle(PTD,1);
 114:../Sources/main.c **** 			i++;
 115:../Sources/main.c **** 			if(i>1)
 116:../Sources/main.c **** 			{
 117:../Sources/main.c **** 				i = 0;
 118:../Sources/main.c **** 				estado = 0;
 119:../Sources/main.c **** 			}*/
 120:../Sources/main.c **** 			temp = Calcula_Tick(1000);	// solicita tempo de 1000 milissegundos = 1 segundos
 265              		.loc 1 120 0
 266 005a 264C     		ldr	r4, .L22+4
 267 005c 244B     		ldr	r3, .L22
 268 005e 181C     		mov	r0, r3
 269 0060 211C     		mov	r1, r4
 270 0062 FFF7FEFF 		bl	Calcula_Tick
 271 0066 031C     		mov	r3, r0
 272 0068 0C1C     		mov	r4, r1
 273 006a 254A     		ldr	r2, .L22+16
 274 006c 1360     		str	r3, [r2]
 275 006e 5460     		str	r4, [r2, #4]
 121:../Sources/main.c **** 			ToggleLedGREEN();
 276              		.loc 1 121 0
 277 0070 FFF7FEFF 		bl	ToggleLedGREEN
 122:../Sources/main.c **** 			estado = 3;
 278              		.loc 1 122 0
 279 0074 204B     		ldr	r3, .L22+8
 280 0076 0322     		mov	r2, #3
 281 0078 1A70     		strb	r2, [r3]
 123:../Sources/main.c **** 		break;
 282              		.loc 1 123 0
 283 007a 35E0     		b	.L7
 284              	.L12:
 124:../Sources/main.c **** 		case 3:
 125:../Sources/main.c **** 			if(Check_Tick(temp) == TRUE)
 285              		.loc 1 125 0
 286 007c 204B     		ldr	r3, .L22+16
 287 007e 5C68     		ldr	r4, [r3, #4]
 288 0080 1B68     		ldr	r3, [r3]
 289 0082 181C     		mov	r0, r3
 290 0084 211C     		mov	r1, r4
 291 0086 FFF7FEFF 		bl	Check_Tick
 292 008a 031C     		mov	r3, r0
 293 008c 012B     		cmp	r3, #1
 294 008e 28D1     		bne	.L20
 126:../Sources/main.c **** 			{
 127:../Sources/main.c **** 				estado = 4;
 295              		.loc 1 127 0
 296 0090 194B     		ldr	r3, .L22+8
 297 0092 0422     		mov	r2, #4
 298 0094 1A70     		strb	r2, [r3]
 128:../Sources/main.c **** 				ToggleLedGREEN();
 299              		.loc 1 128 0
 300 0096 FFF7FEFF 		bl	ToggleLedGREEN
 129:../Sources/main.c **** 			}
 130:../Sources/main.c **** 		break;
 301              		.loc 1 130 0
 302 009a 22E0     		b	.L20
 303              	.L13:
 131:../Sources/main.c **** 		case 4:
 132:../Sources/main.c **** 			temp = Calcula_Tick(1000);	// solicita tempo de 1000 milissegundos = 1 segundos
 304              		.loc 1 132 0
 305 009c 154C     		ldr	r4, .L22+4
 306 009e 144B     		ldr	r3, .L22
 307 00a0 181C     		mov	r0, r3
 308 00a2 211C     		mov	r1, r4
 309 00a4 FFF7FEFF 		bl	Calcula_Tick
 310 00a8 031C     		mov	r3, r0
 311 00aa 0C1C     		mov	r4, r1
 312 00ac 144A     		ldr	r2, .L22+16
 313 00ae 1360     		str	r3, [r2]
 314 00b0 5460     		str	r4, [r2, #4]
 133:../Sources/main.c **** 			ToggleLedBLUE();
 315              		.loc 1 133 0
 316 00b2 FFF7FEFF 		bl	ToggleLedBLUE
 134:../Sources/main.c **** 			estado = 5;
 317              		.loc 1 134 0
 318 00b6 104B     		ldr	r3, .L22+8
 319 00b8 0522     		mov	r2, #5
 320 00ba 1A70     		strb	r2, [r3]
 135:../Sources/main.c **** 		break;	
 321              		.loc 1 135 0
 322 00bc 14E0     		b	.L7
 323              	.L14:
 136:../Sources/main.c **** 		case 5:
 137:../Sources/main.c **** 			if(Check_Tick(temp) == TRUE)
 324              		.loc 1 137 0
 325 00be 104B     		ldr	r3, .L22+16
 326 00c0 5C68     		ldr	r4, [r3, #4]
 327 00c2 1B68     		ldr	r3, [r3]
 328 00c4 181C     		mov	r0, r3
 329 00c6 211C     		mov	r1, r4
 330 00c8 FFF7FEFF 		bl	Check_Tick
 331 00cc 031C     		mov	r3, r0
 332 00ce 012B     		cmp	r3, #1
 333 00d0 09D1     		bne	.L21
 138:../Sources/main.c **** 			{
 139:../Sources/main.c **** 				estado = 0;
 334              		.loc 1 139 0
 335 00d2 094B     		ldr	r3, .L22+8
 336 00d4 0022     		mov	r2, #0
 337 00d6 1A70     		strb	r2, [r3]
 140:../Sources/main.c **** 				ToggleLedBLUE();
 338              		.loc 1 140 0
 339 00d8 FFF7FEFF 		bl	ToggleLedBLUE
 141:../Sources/main.c **** 			}
 142:../Sources/main.c **** 		break;	
 340              		.loc 1 142 0
 341 00dc 03E0     		b	.L21
 342              	.L19:
 111:../Sources/main.c **** 		break;
 343              		.loc 1 111 0
 344 00de C046     		mov	r8, r8
 345 00e0 02E0     		b	.L7
 346              	.L20:
 130:../Sources/main.c **** 		break;
 347              		.loc 1 130 0
 348 00e2 C046     		mov	r8, r8
 349 00e4 00E0     		b	.L7
 350              	.L21:
 351              		.loc 1 142 0
 352 00e6 C046     		mov	r8, r8
 353              	.L7:
 143:../Sources/main.c **** 	}
 144:../Sources/main.c **** }
 354              		.loc 1 144 0
 355 00e8 BD46     		mov	sp, r7
 356              		@ sp needed for prologue
 357 00ea 98BD     		pop	{r3, r4, r7, pc}
 358              	.L23:
 359 00ec C046C046 		.align	3
 360              	.L22:
 361 00f0 E8030000 		.word	1000
 362 00f4 00000000 		.word	0
 363 00f8 00000000 		.word	estado.4924
 364 00fc 00000000 		.word	.L15
 365 0100 00000000 		.word	temp.4925
 366              		.cfi_endproc
 367              	.LFE1:
 369 0104 C046C046 		.section	.bss.estado.4924,"aw",%nobits
 372              	estado.4924:
 373 0000 00       		.space	1
 374              		.section	.bss.temp.4925,"aw",%nobits
 375              		.align	3
 378              	temp.4925:
 379 0000 00000000 		.space	8
 379      00000000 
 380              		.text
 381              	.Letext0:
 382              		.file 2 "../Sources/types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:18     .rodata:00000000 $d
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:34     .text.main:00000000 $t
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:39     .text.main:00000000 main
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:189    .text.ControleLED:00000000 ControleLED
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:175    .text.main:000000e8 $d
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:184    .text.ControleLED:00000000 $t
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:216    .rodata.ControleLED:00000000 $d
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:361    .text.ControleLED:000000f0 $d
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:372    .bss.estado.4924:00000000 estado.4924
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:378    .bss.temp.4925:00000000 temp.4925
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:373    .bss.estado.4924:00000000 $d
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:375    .bss.temp.4925:00000000 $d
                     .debug_frame:00000010 $d
C:\Users\PDI\AppData\Local\Temp\ccFC3nX5.s:369    .text.ControleLED:00000104 $t

UNDEFINED SYMBOLS
InicializaCPU
InicializaTimer
InicializaRele
InicializaSaidas
InicializaEntradas
InicializaSerial
InicializaAnalogico
InicializaLedRED
InicializaLedGREEN
InicializaLedBLUE
AcionaLedRED
AcionaLedGREEN
AcionaLedBLUE
EnviaString
LeAnalogicoA0
sprintf
LeAnalogicoA1
LeAnalogicoA2
AcionaRele
EntradasDigitais
SaidasDigitais
Calcula_Tick
ToggleLedRED
Check_Tick
ToggleLedGREEN
ToggleLedBLUE
